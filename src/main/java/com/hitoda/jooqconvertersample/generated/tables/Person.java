/*
 * This file is generated by jOOQ.
 */
package com.hitoda.jooqconvertersample.generated.tables;


import com.hitoda.jooqconvertersample.domain.Gender;
import com.hitoda.jooqconvertersample.domain.PersonId;
import com.hitoda.jooqconvertersample.generated.Indexes;
import com.hitoda.jooqconvertersample.generated.Keys;
import com.hitoda.jooqconvertersample.generated.Sample;
import com.hitoda.jooqconvertersample.generated.tables.records.PersonRecord;
import com.hitoda.jooqconvertersample.infra.GenderConverter;
import com.hitoda.jooqconvertersample.infra.PersonIdConverter;
import com.hitoda.jooqconvertersample.infra.ZonedDatetimeConverter;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Person extends TableImpl<PersonRecord> {

    private static final long serialVersionUID = -718014738;

    /**
     * The reference instance of <code>sample.person</code>
     */
    public static final Person PERSON = new Person();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonRecord> getRecordType() {
        return PersonRecord.class;
    }

    /**
     * The column <code>sample.person.id</code>.
     */
    public final TableField<PersonRecord, PersonId> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "", new PersonIdConverter());

    /**
     * The column <code>sample.person.name</code>.
     */
    public final TableField<PersonRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>sample.person.gender</code>.
     */
    public final TableField<PersonRecord, Gender> GENDER = createField(DSL.name("gender"), org.jooq.impl.SQLDataType.VARCHAR(6), this, "", new GenderConverter());

    /**
     * The column <code>sample.person.birthday</code>.
     */
    public final TableField<PersonRecord, ZonedDateTime> BIRTHDAY = createField(DSL.name("birthday"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new ZonedDatetimeConverter());

    /**
     * Create a <code>sample.person</code> table reference
     */
    public Person() {
        this(DSL.name("person"), null);
    }

    /**
     * Create an aliased <code>sample.person</code> table reference
     */
    public Person(String alias) {
        this(DSL.name(alias), PERSON);
    }

    /**
     * Create an aliased <code>sample.person</code> table reference
     */
    public Person(Name alias) {
        this(alias, PERSON);
    }

    private Person(Name alias, Table<PersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Person(Name alias, Table<PersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Person(Table<O> child, ForeignKey<O, PersonRecord> key) {
        super(child, key, PERSON);
    }

    @Override
    public Schema getSchema() {
        return Sample.SAMPLE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSON_ID, Indexes.PERSON_PRIMARY);
    }

    @Override
    public UniqueKey<PersonRecord> getPrimaryKey() {
        return Keys.KEY_PERSON_PRIMARY;
    }

    @Override
    public List<UniqueKey<PersonRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonRecord>>asList(Keys.KEY_PERSON_PRIMARY, Keys.KEY_PERSON_ID);
    }

    @Override
    public Person as(String alias) {
        return new Person(DSL.name(alias), this);
    }

    @Override
    public Person as(Name alias) {
        return new Person(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Person rename(String name) {
        return new Person(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Person rename(Name name) {
        return new Person(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<PersonId, String, Gender, ZonedDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
